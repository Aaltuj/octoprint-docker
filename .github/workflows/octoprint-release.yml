name: Image Deploy

on:
  repository_dispatch:
    types:
      - release
  push:
    branches:
      - master
      
jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      noop: ${{ steps.filter.outputs.noop }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2.2.1
      if: ${{ github.event_name == 'push'}}
      id: filter
      with:
        filters: |
          image:
            - 'root/**'
            - Dockerfile

  release:
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ github.event_name == 'repository_dispatch' || needs.changes.outputs.image == 'true'}}
    strategy:
      matrix:
        tags: ['latest','%X%', '%X.Y%', '%X.Y.Z%']


    steps:
      - uses: actions/checkout@v2
      - name: Get Tag if push
        id: get-octoprint-release
        if: ${{ github.event_name == 'push'}}
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          owner: OctoPrint
          repo: OctoPrint
      - name: Set Tag on Push
        if: ${{ github.event_name == 'push'}}
        run: echo "::set-env name=tag_name::${{ steps.get-octoprint-release.outputs.release }}"
      - name: Set Tag on dispatch
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: echo "::set-env name=tag_name::${{ github.event.client_payload.tag_name }}"
      - name: Tagging strategy
        id: tagging
        uses: HackerHappyHour/tagging-strategy@1.0.0
        with:
          tag_name: "${{ env.tag_name }}"
          pattern: "${{ matrix.tags}}"

      - name: Set up Docker Buildx
        id: setup
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      
      - name: Docker Login
        id: login
        run: |
          echo ${{ secrets.DOCKER_PASSWORD}} | docker login -u ${{ secrets.DOCKER_USERNAME}} --password-stdin

      - name: Build and Deploy
        id: build_deploy
        run: |
          docker buildx build --push \
            --platform linux/arm64,linux/amd64,linux/arm/v7 \
            --cache-from octoprint/octoprint:cache \
            --cache-to octoprint/octoprint:cache \
            --build-arg OCTOPRINT_BASE_IMAGE=${{ steps.get-octoprint-release.outputs.release }} \
            --progress plain -t octoprint/octoprint:${{ steps.tagging.outputs.tag }} -f Dockerfile .


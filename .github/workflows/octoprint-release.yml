name: OctoPrint Release

on:
  repository_dispatch:
    types:
      - release
      - prerelease

jobs:
  buildx:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # python-variants: [3, 2]
        # build/deploy variants such as -camera by adding them here
        # feature-variants: ['vanilla']
        tags: ['latest' '%X%', '%X.Y%', '%X.Y.Z%']

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Tagging strategy
        id: Tagging
        uses: HackerHappyHour/tagging-strategy@v1
        with:
          tag_name: "${{ github.event.client_payload.tag_name }}"
          pattern: "${{ matrix.tags}}"

      - name: Set up Docker Buildx
        id: setup
        uses: crazy-max/ghaction-docker-buildx@v3
        with:
          buildx-version: latest
          qemu-version: latest
      
      - name: Docker Login
        id: login
        run: |
          echo ${{ secrets.DOCKER_PASSWORD}} | docker login -u ${{ secrets.DOCKER_USERNAME}} --password-stdin

      - name: Configure Build
        id: configure
        run: |
          IMAGE=${{ github.repository_owner }}/octoprint
          if [["${{ secrets.DOCKER_IMAGE_ORGANIZATION }}"]]; then
            $IMAGE=${{ secrets.DOCKER_IMAGE_ORGANIZATION }}
          fi
          REGISTRY=docker.io
          if [["${{ secrets.DOCKER_IMAGE_REGISTRY }}"]]; then
            $REGISTRY=${{ secrets.DOCKER_IMAGE_REGISTRY }}
          fi
          PLATFORMS=linux/arm64,linux/amd64
          CACHE = $(REGISTRY)/$(IMAGE):cache
          IMG=$(REGISTRY)/$(IMAGE)

          DOCKERFILE="./Dockerfile"
          PYTHON_BASE_IMAGE=3.8-slim-buster

          echo "::set-output name=registry::${REGISTRY}"
          echo "::set-output name=image::${IMG}"
          echo "::set-output name=platform::${PLATFORMS}"
          echo "::set-output name=cache::${CACHE}"
          echo "::set-output name=dockerfile::${DOCKERFILE}"
          echo "::set-output name=python_base_image::${PYTHON_BASE_IMAGE}"

      - name: Build and Deploy
        id: build_deploy
        run: |
          # docker buildx build --push
          echo still working on this step
          

        

